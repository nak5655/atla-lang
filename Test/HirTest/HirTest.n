using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using NUnit.Framework;

using Atla.Lang.Hir;

namespace Test.HirTest
{
    [TestFixture]
    class HirTest
    {
        [Test]
        public EasyTypingTest(): void {
            def globalScope = Scope();
            def funcScope = Scope(globalScope);
            def func = Expr.Fn(
                [FnArg("a"), FnArg("b")],
                {
                    def b = Expr.Block(Scope(funcScope));
                    b.stmts.Add(Stmt.Return(Expr.String("c")));
                    b
                },
                funcScope
            );
            func.typeVar.addHint(TypeHint.Fn([
                TypeVar(TypeHint.Name(globalScope, Scope.intTypeName)),
                TypeVar(TypeHint.Name(globalScope, Scope.intTypeName)),
            ], TypeVar(TypeHint.Name(globalScope, Scope.stringTypeName))));
            Typing().analyze(globalScope, func);
            Typing().infer(globalScope, func);
            
            Assert.IsInstanceOf(typeof(Type.Fn), func.typeVar.type.Value);
            Assert.IsInstanceOf(typeof(Type.Native), func.body.typeVar.type.Value);
        }
        
        [Test]
        public RecursiveTypingTest(): void {
            def globalScope = Scope();
            def blockScope = Scope(globalScope);
            def block = Expr.Block(blockScope);
            block.stmts.AddRange([
                Stmt.Let("a", Expr.Int(1)),
                Stmt.Let("b", Expr.Id("a")),
                Stmt.Let("c", Expr.Id("b")),
                Stmt.Assign("c", Expr.Id("b")),
                Stmt.Return(Expr.Id("c"))
            ]);
            Typing().analyze(globalScope, block);
            Typing().infer(globalScope, block);
            
            Assert.IsInstanceOf(typeof(Type.Native), block.typeVar.type.Value);
        }
    }
}
