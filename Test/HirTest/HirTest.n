using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using NUnit.Framework;

using Atla.Lang.Hir;

namespace Test.HirTest
{
    [TestFixture]
    class HirTest
    {
        [Test]
        public EasyTypingTest(): void {
            def code = "import System::Array\nimport System::Console\n\nfn main (args: Array String): Unit = Console::WriteLine \"hello\"";
            
            def lexer = Atla.Lang.Parser.Lexer();
            def tokens = lexer.tokenize(code).getResult().Value;
            def parser = Atla.Lang.Parser.Parser();
            def ast = parser.mod.parse(Atla.Lang.Parser.TokenInput(tokens, 0)).getResult().Value;
            def hir = (Atla.Lang.Ast.Trans().trans(ast, "main"));
            Atla.Lang.Hir.Typing().typing(hir);
            
            def errors = hir.scanErrors().Distinct().ToList();
            Assert.Equals(1, errors.Count());
        }
        
       [Test]
        public EasyTypingFailTest(): void {
            def code = "fn f (a: Int): String = a";
            
            def lexer = Atla.Lang.Parser.Lexer();
            def tokens = lexer.tokenize(code).getResult().Value;
            def parser = Atla.Lang.Parser.Parser();
            def ast = parser.mod.parse(Atla.Lang.Parser.TokenInput(tokens, 0)).getResult().Value;
            def hir = (Atla.Lang.Ast.Trans().trans(ast, "main"));
            Atla.Lang.Hir.Typing().typing(hir);
            
            def errors = hir.scanErrors().Distinct().ToList();
            Assert.Equals(1, errors.Count());
        }
        
        [Test]
        public RecursiveTypingTest(): void {
            def globalScope = Scope();
            def blockScope = Scope(globalScope);
            def block = Expr.Block(blockScope);
            block.stmts.AddRange([
                Stmt.Let("a", Expr.Int(1)),
                Stmt.Let("b", Expr.Id("a")),
                Stmt.Let("c", Expr.Id("b")),
                Stmt.Assign("c", Expr.Id("b")),
                Stmt.Return(Expr.Id("c"))
            ]);
            Typing().typing(globalScope, block, Type.Unknown());
            
            Assert.IsInstanceOf(typeof(Type.Native), block.type.resolved());
        }
        
        [Test]
        public RecursiveFnTypingTest(): void {
            def mod = Module("main");
            def mainFn = Expr.Fn(mod.scope, ["a"]);
            def mainFnBody = Expr.Block(mainFn.scope);
            mainFnBody.stmts.AddRange([
                Stmt.Return(Expr.Apply(Expr.Id("+"), [
                    Expr.Id("a"),
                    Expr.Int(1)
                ]))
            ]);
            mainFn.body = mainFnBody;
            mod.declareFn("main", mainFn);
            Typing().typing(mod);
            
            def fnType = mainFn.type.resolved() :> Type.Fn;
            Assert.AreEqual(typeof(int), (fnType.ret :> Type.Native).type);
        }
    }
}
