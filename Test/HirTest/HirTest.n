using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using NUnit.Framework;

using Atla.Lang.Hir;

namespace Test.HirTest
{
    [TestFixture]
    class HirTest
    {
        [Test]
        public EasyTypingTest(): void {
            def globalScope = Scope();
            def funcScope = Scope(globalScope);
            def func = Expr.Fn(
                [FnArg("a"), FnArg("b")],
                {
                    def b = Expr.Block(Scope(funcScope));
                    b.stmts.Add(Stmt.Return(Expr.String("c")));
                    b
                },
                funcScope
            );
            func.typeHint = TypeHint.Fn([
                TypeHint.Name(Scope.intTypeName),
                TypeHint.Name(Scope.intTypeName),
            ], TypeHint.Name(Scope.stringTypeName));
            Typing().typing(globalScope, func, Type.Any());
            
            Assert.IsInstanceOf(typeof(Type.Fn), func.type.resolved());
            Assert.IsInstanceOf(typeof(Type.Native), func.type.resolved());
        }
        
        [Test]
        public RecursiveTypingTest(): void {
            def globalScope = Scope();
            def blockScope = Scope(globalScope);
            def block = Expr.Block(blockScope);
            block.stmts.AddRange([
                Stmt.Let("a", Expr.Int(1)),
                Stmt.Let("b", Expr.Id("a")),
                Stmt.Let("c", Expr.Id("b")),
                Stmt.Assign("c", Expr.Id("b")),
                Stmt.Return(Expr.Id("c"))
            ]);
            Typing().typing(globalScope, block, Type.Any());
            
            Assert.IsInstanceOf(typeof(Type.Native), block.type.resolved());
        }
        
        [Test]
        public RecursiveFnTypingTest(): void {
            def mod = Module("main");
            def mainFn = Expr.Fn(mod.scope, ["a"]);
            def mainFnBody = Expr.Block(mainFn.scope);
            mainFnBody.stmts.AddRange([
                Stmt.Let("b", Expr.Id("a")),
                Stmt.Assign("b", Expr.Int(1)),
                Stmt.Return(Expr.Id("b"))
            ]);
            mainFn.body = mainFnBody;
            mod.declareFn("main", mainFn);
            Typing().typing(mod);
            
            def fnType = mainFn.type.resolved() :> Type.Fn;
            Assert.AreEqual(typeof(int), (fnType.ret :> Type.Native).type);
        }
    }
}
