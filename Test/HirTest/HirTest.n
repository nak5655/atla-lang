using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using NUnit.Framework;

using Atla.Lang.Hir;

namespace Test.HirTest
{
    [TestFixture]
    class HirTest
    {
        [Test]
        public TypeUnificationTest(): void {
            def globalScope = Scope();
            def funcScope = Scope(globalScope);
            def func = Expr.Fn(
                ["a", "b"],
                {
                    def b = Expr.Block(Scope(funcScope));
                    b.stmts.Add(Stmt.Return(Expr.String("c")));
                    b
                },
                funcScope
            );
            func.typeVar.addHint(TypeHint.Fn([
                TypeVar(TypeHint.Name(globalScope, Scope.intTypeName)),
                TypeVar(TypeHint.Name(globalScope, Scope.intTypeName)),
            ], TypeVar(TypeHint.Name(globalScope, Scope.stringTypeName))));
            Typing().analyze(globalScope, func);
            Typing().infer(globalScope, func);
            
            Assert.IsInstanceOf(typeof(Type.Fn), func.typeVar.type.Value);
            
            match (func.typeVar.type) {
                | Some(Type.Fn(args, ret)) => {
                    foreach (arg in args) {
                        Assert.IsInstanceOf(typeof(Type.Native), arg);
                    }
                    Assert.IsInstanceOf(typeof(Type.Native), ret);
                }
            }
        }
    }
}
