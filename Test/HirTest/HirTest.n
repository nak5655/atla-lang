using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using NUnit.Framework;

using Atla.Lang;
using Atla.Lang.Hir;

namespace Test.HirTest
{
    [TestFixture]
    class HirTest
    {
        codeTest(caseName: string): void {
            def asm = Atla.Lang.Hir.Assembly("Test", Misc.tempFile($"HirTest_$caseName.exe"));
            asm.scope = Scope.Assembly(Scope.Global(), asm.name);
            
            def code = Misc.readCase($"$caseName.atla");
            def compiler = Misc.compiler();
            _ = compiler.updateModule(asm, "main", code).Value;
            compiler.compileHirToThir(asm);
            
            def errors = asm.scanErrors().Distinct().ToList();
            Assert.AreEqual(0, errors.Count());
        }
        
        [Test]
        public HirFibonacciTest(): void {
            codeTest("fibonacci")
        }
        
        [Test]
        public HirCountUpTest(): void {
            codeTest("countup")
        }
        
        [Test]
        public HirGeometryTest(): void {
            codeTest("geometry")
        }
        
        [Test]
        public HirFizzBuzzTest(): void {
            codeTest("FizzBuzz")
        }
        
        [Test]
        public HirSubModuleTest(): void {
            def asm = Atla.Lang.Hir.Assembly("Test", Misc.tempFile("HirTest_module.exe"));
            asm.scope = Scope.Assembly(Scope.Global(), asm.name);
            
            def compiler = Misc.compiler();
            
            { // main
                def code = Misc.readCase("ModuleMain.atla");
                def hir = compiler.updateModule(asm, "Main", code).Value;
            
                def errors = hir.scanErrors().Distinct().ToList();
                Assert.AreEqual(0, errors.Count());
            }
            
            { // sub
                def code = Misc.readCase("Sub/Greet.atla");
                def hir = compiler.updateModule(asm, "Sub::Greet", code).Value;
            
                def errors = hir.scanErrors().Distinct().ToList();
                Assert.AreEqual(0, errors.Count());
            }
            
            compiler.compileHirToThir(asm);
            
            def errors = asm.scanErrors().Distinct().ToList();
            Assert.AreEqual(0, errors.Count());
        }
    }
}
