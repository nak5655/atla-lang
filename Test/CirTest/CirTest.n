using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using Atla.Lang.Cir;

namespace Test.CirTest
{
    [TestFixture]
    class CirTest
    {
        [Test]
        public CirEasyTest(): void {
            def asm = Atla.Lang.Hir.Assembly("Test", Misc.tempFile("CirTest.exe"));
            
            def code = Misc.readCase("hello.atla");
            _ = Atla.Lang.Misc.updateModule(asm, "main", code);
            
            def cir = Atla.Lang.Misc.compile(Atla.Lang.Misc.compile(asm));
            
            Assert.AreEqual(1, cir.modules.First().methods.Count());
            
            Atla.Lang.Cir.Emit().emit(cir);
        }
        
        [Test]
        public CirFibonacciTest(): void {
            def asm = Atla.Lang.Hir.Assembly("Test", Misc.tempFile("CirTest.exe"));
            
            def code = Misc.readCase("fibonacci.atla");
            _ = Atla.Lang.Misc.updateModule(asm, "main", code);
            
            def mir = Atla.Lang.Misc.compile(asm);
            def cir = Atla.Lang.Misc.compile(mir);
            
            Assert.AreEqual(1, cir.modules.First().methods.Count());
            
            Atla.Lang.Cir.Emit().emit(cir);
        }
        
        //[Test]
        //public symbolEqualityTest(): void {
        //    def a = Symbol.Method("aaa", [typeof(System.String)], typeof(void));
        //    def b = Symbol.Method("aaa", [typeof(System.String)], typeof(void));
        //    Assert.AreEqual(a, b);
        //}
        //
        //[Test]
        //public symbolHashTest(): void {
        //    def a = Symbol.Method("aaa", [typeof(System.String)], typeof(void));
        //    def b = Symbol.Method("aaa", [typeof(System.String)], typeof(void));
        //    
        //    def table: Hashtable[Symbol.Method, int] = Hashtable();
        //    table.Add(a, 0);
        //    Assert.IsTrue(table.ContainsKey(b));
        //}
    }
}
