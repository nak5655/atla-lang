using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using NUnit.Framework;

using Atla.Lang.Cir;

namespace Test.CirTest
{
    [TestFixture]
    class CirTest
    {
        codeTest(caseName: string): void {
            def caseFileName = $"$caseName.atla";
            def asm = Atla.Lang.Hir.Assembly("Test", Misc.tempFile($"CirTest_$caseName.exe"));
            asm.scope = Atla.Lang.Hir.Scope.Assembly(Atla.Lang.Hir.Scope.Global(), asm.name);
            
            def code = Misc.readCase(caseFileName);
            def compiler = Misc.compiler();
            _ = compiler.updateModule(asm, "main", code).Value;
            compiler.compileHirToThir(asm);
            
            def mir = compiler.compileHirToMir(asm).Value;
            def _cir = compiler.compileMirToCir(mir);
            def cir = _cir.Value;
            
            Atla.Lang.Cir.Emit().emit(cir);
        }
        
        [Test]
        public CirHelloTest(): void {
            codeTest("hello")
        }
        
        [Test]
        public CirFibonacciTest(): void {
            codeTest("fibonacci")
        }
        
        [Test]
        public CirGeometryTest(): void {
            codeTest("geometry")
        }
        
        [Test]
        public CirCountUpTest(): void {
            codeTest("countup")
        }
        
        [Test]
        public CirFizzBuzzTest(): void {
            codeTest("FizzBuzz")
        }
        
        //[Test]
        //public symbolEqualityTest(): void {
        //    def a = Symbol.Method("aaa", [typeof(System.String)], typeof(void));
        //    def b = Symbol.Method("aaa", [typeof(System.String)], typeof(void));
        //    Assert.AreEqual(a, b);
        //}
        //
        //[Test]
        //public symbolHashTest(): void {
        //    def a = Symbol.Method("aaa", [typeof(System.String)], typeof(void));
        //    def b = Symbol.Method("aaa", [typeof(System.String)], typeof(void));
        //    
        //    def table: Hashtable[Symbol.Method, int] = Hashtable();
        //    table.Add(a, 0);
        //    Assert.IsTrue(table.ContainsKey(b));
        //}
    }
}
