using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using NUnit.Framework;

using Atla.Lang.Parser;
using Atla.Lang.Parse;
using Atla.Lang.Ast;
using Atla.Lang.Hir;

namespace Test.AstTest
{
    [TestFixture]
    class AstTest
    {
        [Test]
        public EasyAstTest(): void {
            def code = "import a.\nfn a";
            
            def lexer = Lexer();
            def tokens = lexer.tokenize(code).getResult().Value.result;
            def parser = Parser();
            
            def ast = parser.mod.parse(TokenInput(tokens, 0)).getResult().Value.result;
            Assert.AreEqual(0, ast.scanErrors().Count());
            
            def hir = Atla.Lang.Ast.Trans().trans(ast, "main");
            Assert.AreEqual(0, hir.getResult().Value.scanErrors().Count());
        }
        
        [Test]
        public AstFibonacciTest(): void {
            def code = Misc.readCase("fibonacci.atla");
            
            def lexer = Lexer();
            def tokens = lexer.tokenize(code).getResult().Value.result;
            def parser = Parser();
            
            def ast = parser.mod.parse(TokenInput(tokens, 0)).getResult().Value.result;
            Assert.AreEqual(0, ast.scanErrors().Count());
            
            def hir = Atla.Lang.Ast.Trans().trans(ast, "main");
            Assert.AreEqual(0, hir.getResult().Value.scanErrors().Count());
        }
        
        [Test]
        public AstCountUpTest(): void {
            def code = Misc.readCase("countUp.atla");
            
            def lexer = Lexer();
            def tokens = lexer.tokenize(code).getResult().Value.result;
            def parser = Parser();
            
            def ast = parser.mod.parse(TokenInput(tokens, 0)).getResult().Value.result;
            Assert.AreEqual(0, ast.scanErrors().Count());
            
            def hir = Atla.Lang.Ast.Trans().trans(ast, "main");
            Assert.AreEqual(0, hir.getResult().Value.scanErrors().Count());
        }
    }
}
