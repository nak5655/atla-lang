using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using NUnit.Framework;

using Atla.Lang.Mir;

namespace Test.MirTest
{
    [TestFixture]
    class MirTest
    {
        [Test]
        public MirEasyTest(): void {
            def asm = Atla.Lang.Hir.Assembly("Test", Misc.tempFile("MirTest.exe"));
            
            def code = Misc.readCase("hello.atla");
            _ = Atla.Lang.Misc.updateModule(asm, "main", code);
            def mir = Atla.Lang.Misc.compile(asm).modules["main"];
            
            Assert.AreEqual(1, mir.methods.Count());
            Assert.AreEqual(1, mir.methods.First().body.Length);
            Assert.IsInstanceOf(typeof(Atla.Lang.Mir.Ins.Call), mir.methods.First().body.First()); // it is Call, not CallAssign. Because the return value is void.
        }
        
        [Test]
        public MirFibonacciTest(): void {
            def asm = Atla.Lang.Hir.Assembly("Test", Misc.tempFile("MirTest.exe"));
            
            def code = Misc.readCase("fibonacci.atla");
            _ = Atla.Lang.Misc.updateModule(asm, "main", code);
            def mir = Atla.Lang.Misc.compile(asm).modules["main"];
            
            Assert.IsInstanceOf(typeof(Atla.Lang.Mir.Ins.Call), mir.methods.First().body.First()); // it is Call, not CallAssign. Because the return value is void.
        }
        
        [Test]
        public MirCountUpTest(): void {
            def asm = Atla.Lang.Hir.Assembly("Test", Misc.tempFile("MirTest.exe"));
            
            def code = Misc.readCase("countup.atla");
            _ = Atla.Lang.Misc.updateModule(asm, "main", code);
            def mir = Atla.Lang.Misc.compile(asm).modules["main"];
            
            Assert.IsInstanceOf(typeof(Atla.Lang.Mir.Ins.Call), mir.methods.First().body.First()); // it is Call, not CallAssign. Because the return value is void.
        }
    }
}
