using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Atla.Lang
{
    public class Misc
    {
        public static joinToString[T](sep: string, values: list[T]): string {
            def sb = StringBuilder();
            when (values.Length > 0) {
                _ = sb.Append(values.Head.ToString());
                foreach (value in values.Tail) {
                    _ = sb.Append(sep).Append(value.ToString());
                }
            }
            sb.ToString()
        }
        
        public static joinToString[T](sep: string, values: List[T]): string {
            joinToString(sep, values.ToNList())
        }
        
        public static compileToTypedHir(asm: Hir.Assembly, moduleName: string, code: string): Hir.Module {
            def lexer = Atla.Lang.Parser.Lexer();
            def tokens = lexer.tokenize(code).getResult().Value;
            def parser = Atla.Lang.Parser.Parser();
            def ast = parser.mod.parse(Atla.Lang.Parser.TokenInput(tokens, 0)).getResult().Value;
            def hir = Atla.Lang.Ast.Trans().trans(Hir.Scope.Global(), ast, "main");
            Atla.Lang.Hir.Typing().typing(hir);
            
            hir
        }
        
        public static compileToMir(asm: Mir.Assembly, moduleName: string, code: string): Mir.Module {
            def lexer = Atla.Lang.Parser.Lexer();
            def tokens = lexer.tokenize(code).getResult().Value;
            def parser = Atla.Lang.Parser.Parser();
            def ast = parser.mod.parse(Atla.Lang.Parser.TokenInput(tokens, 0)).getResult().Value;
            def hir = Atla.Lang.Ast.Trans().trans(Hir.Scope.Global(), ast, "main");
            Atla.Lang.Hir.Typing().typing(hir);
            def mir = Atla.Lang.Hir.Trans().generateModule(asm, hir, $"$(moduleName).dll").getResult().Value;
            
            mir
        }
    }
}
