using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

using Atla.Lang.Parse;


namespace Atla.Lang.Parser
{
    [Record]
    public class SourceChar {
        public char: char;
        public pos: Position;
        
        override public ToString(): string {
            $"\'$(this.char)\'"
        }
    }
    
    [Record]
    public class SourceString: HasSpan[SourceString] {
        public string: string;
        
        public this(chars: list[SourceChar]) {
            this.string = string(chars.Map(c => c.char).ToArray());
            if (chars.Length > 0) {
                def a = chars.First().pos;
                def b = chars.Last().pos;
                this.span = Span(a, b.right()); // add 1 to span.hi.col to include the last charactor.
            } else {
                this.span = Span.zero();
            }
        }
        
    }
    
    [Record]
    public class SourceInput: Input[SourceChar] {
        lines: list[string];
        line: int;
        col: int;
        index: int;
        
        public this(text: string) {
            lines = text.Split(['\n'].ToArray()).ToNList();
            line = 0;
            col = 0;
            index = 0;
        }
        
        public get(): option[SourceChar] {
            def ret: option[SourceChar] = if ((line < 0 || lines.Length - 1 < line) || lines.Nth(line).Length < col) {
                None()
            } else {
                if (col == lines.Nth(line).Length) {
                    Some(SourceChar('\n', Position(lines, line, col, index)))
                } else {
                    Some(SourceChar(lines.Nth(line).ElementAt(col), Position(lines, line, col, index)))
                }
            }
            ret // occur an compiler error when without this temporal variable.
        }
        
        public position(): Position {
            Position(lines, line, col, index)
        }
        
        public next(): Input[SourceChar] {
            if (col < lines.Nth(line).Length - 1)
                SourceInput(lines, line, col + 1, index + 1)
            else if (col == lines.Nth(line).Length - 1)
                SourceInput(lines, line, col + 1, index) // do not increment index when the char is a \n
            else
                SourceInput(lines, line + 1, 0, index)
        }
        
        public override ToString(): string {
            $"SourceInput{$(position())}, data=\"$(get())\""
        }
    }
    
    public variant Token: HasSpan[Token] {
        | Comment {
            public value: string;
            
            public this(value: string, span: Span) {
                this.value = value;
                this.span = span;
            }
            
            public override ToString(): string {
                $"Comment($(value))"
            }
        }
        | Id {
            public value: string;
    
            public this(s: SourceString) {
                value = s.string;
                span = s.span;
            }
            
            public override ToString(): string {
                $"Id($(value))"
            }
        }
        | InfixOp {
            public value: string;
            public precedence: int;
            
            public this(s: SourceString, precedence: int) {
                value = s.string;
                this.precedence = precedence;
                span = s.span;
            }
            
            public override ToString(): string {
                $"InfixOp($(value))"
            }
        }
        | Delim {
            public value: string;
            
            public this(s: SourceString) {
                value = s.string;
                span = s.span;
            }
            
            public override ToString(): string {
                $"Delim($(value))"
            }
        }
        | Int {
            public value: int;
            
            public this(s: SourceString) {
                value = int.Parse(s.string);
                span = s.span;
            }
            
            public override ToString(): string {
                $"Int($(value))"
            }
        }
        | Double {
            public value: double;
            
            public this(s: SourceString) {
                value = double.Parse(s.string);
                span = s.span;
            }
            
            public override ToString(): string {
                $"Double($(value))"
            }
        }
        | String {
            public value: string;
            
            public this(value: string, span: Span) {
                this.value = value;
                this.span = span;
            }
            
            public override ToString(): string {
                $"String($(value))"
            }
        }
    }
    
    public class Lexer: ParserEnv[SourceChar]
    {
        public char(char: char): Parser[SourceChar, SourceChar] {
            satisfy("char", c => c.char == char)
        }
        
        alpha: Parser[SourceChar, SourceChar];
        alpha_: Parser[SourceChar, SourceChar];
        digit: Parser[SourceChar, SourceChar];
        alphaNum: Parser[SourceChar, SourceChar];
        alphaNum_: Parser[SourceChar, SourceChar];
        sign: Parser[SourceChar, SourceChar];
        nonZeroDigit: Parser[SourceChar, SourceChar];
        uintZeroRaw: Parser[SourceChar, SourceChar];
        uintNotZeroRaw: Parser[SourceChar, SourceString];
        uintRaw: Parser[SourceChar, SourceString];
        intRaw: Parser[SourceChar, SourceString];
        doubleRaw: Parser[SourceChar, SourceString];
        
        delimiters: list[string];
        signDelims: HashSet[string];
        
        opSigns: HashSet[char];
        infixOp2: HashSet[string];
        infixOp3: HashSet[string];
        infixOp4: HashSet[string];
        infixOp5: HashSet[string];
        infixOp6: HashSet[string];
        
        comment: Parser[SourceChar, Token];
        ws: Parser[SourceChar, SourceChar];
        delim: Parser[SourceChar, Token];
        
        op: Parser[SourceChar, Token];
        id: Parser[SourceChar, Token];
        int: Parser[SourceChar, Token];
        double: Parser[SourceChar, Token];
        str: Parser[SourceChar, Token];
        
        tokens: Parser[SourceChar, list[Token]];
        
        public this() {
            alpha = satisfy("letter", c => ('a' <= c.char && c.char <= 'z') || ('A' <= c.char && c.char <= 'Z'));
            alpha_ = alpha._or(char('_'));
            digit = satisfy("digit", c => '0' <= c.char && c.char <= '9');
            alphaNum = alpha._or(digit);
            alphaNum_ = alphaNum._or(char('_'));
            sign = char('+')._or(char('-'));
            nonZeroDigit = satisfy("non zero digit", c => '1' <= c.char && c.char <= '9');
            uintZeroRaw = char('0');
            uintNotZeroRaw = nonZeroDigit._and(digit.many()).map((a: SourceChar, b) => {
                SourceString(a :: b)
            });
            uintRaw = uintZeroRaw.map(c => SourceString([c]))._or(uintNotZeroRaw);
            intRaw = sign.optional()._and(uintRaw).map((a, b) => {
                match (a) {
                    | Some(c) => SourceString(c.char.ToString() + b.string).addSpan(Span(c.pos, b.span.hi))
                    | _ => b
                }
            });
            doubleRaw = intRaw._and(satisfy("dot", c => c.char == '.'))._and(digit.many1()).map((a_b, c) => {
                def s = a_b[0].string + a_b[1].char + c.Map(sc => sc.char).joinToString("");
                SourceString(s).addSpan(Span(a_b[0].span.lo, c.Last().pos.right()))
            });
        
            delimiters = [
                "val", "var", "fn", "mod", "def", "use", "import", "type", "this", "trait", "impl", // declarations
                "for", "in", "if", "else", "match", "do", "while", // control flows
                "return", "continue", "break", // block
                "true", "false", // boolean
            ];
            def delimSigns = [
                "->", "~>", "=>", "::",
                "=", "(", ")", "<", ">", "[", "]", "{", "}", ":", ".", "-" "+", "*", "/", "~", "|", "&" // signs
            ];
            
            opSigns = HashSet("+-*/%|&><!=.");
            
            infixOp2 = HashSet(["||"]);
            infixOp3 = HashSet(["==", "!="]);
            infixOp4 = HashSet([".."]);
            infixOp5 = HashSet(["+", "-"]);
            infixOp6 = HashSet(["*", "/", "%"]);
            def infixOps = HashSet(infixOp2.Concat(infixOp3).Concat(infixOp4).Concat(infixOp5).Concat(infixOp6));
        
            comment = char('#')._and(satisfy("comment", c => c.char != '\n').many()).map((s, cs) => {
                def content = SourceString(cs);
                def span = Span(s.pos, s.pos.right()) + content.span;
                Token.Comment(content.string, span)
            });
            ws = char(' ')._or(char('\n')); // TODO TabやCRLFなどが来たら即失敗にしたい
            def delimS = delimSigns.Map(delimiter => {
                // 記号のデリミタは演算子の記号が続いてはいけない(カッコなどは連続していい)
                phrase(delimiter, delimiter.ToArray().ToNList(), (i, a) => i.char == a).notFollowedBy(satisfy("", c => opSigns.Contains(c.char))).map(s => {
                    Token.Delim(SourceString(s))
                })
            }).FoldRight(fail("no matching delimiter"), (a, b) => a._or(b));
            def delimA = delimiters.Map(delimiter => {
                // アルファベットのデリミタはアルファベット数字アンダーバーが続いてはいけない
                phrase(delimiter, delimiter.ToArray().ToNList(), (i, a) => i.char == a).notFollowedBy(alphaNum_).map(s => {
                    Token.Delim(SourceString(s))
                })
            }).FoldRight(fail("no matching delimiter"), (a, b) => a._or(b));
            delim = delimA._or(delimS);
            
            op = infixOps.Map(op => {
                phrase(op, op.ToArray().ToNList(), (i, a) => i.char == a).map(cs => {
                    def s = SourceString(cs);
                    def precedence = if (infixOp2.Contains(s.string)) 2
                    else if (infixOp3.Contains(s.string)) 3
                    else if (infixOp4.Contains(s.string)) 4
                    else if (infixOp5.Contains(s.string)) 5
                    else if (infixOp6.Contains(s.string)) 6
                    else 1;
                    Token.InfixOp(s, precedence)
                }).notFollowedBy(satisfy("sign", (c => opSigns.Contains(c.char)))) // 演算子の後に記号が続かない
            }).FoldRight(fail("no matching operator"), (a, b) => a._or(b));;
            id = alpha_._and(alphaNum_.many()).map((x, xs) => {
                def s = SourceString(x :: xs);
                if (delimiters.Contains(s.string)) {
                    Token.Delim(s)
                } else {
                    Token.Id(s)
                }
            });
            double = doubleRaw.map(x => Token.Double(x));
            int = intRaw.map(x => {
                Token.Int(x)
            });
            str = char('\"')._and(satisfy("str", c => c.char != '\"').many())._and(char('\"')).map((l_xs, r) => {
                def s = SourceString(l_xs[1]);
                def span = Span(l_xs[0].pos, r.pos.right());
                Token.String(s.string, span)
            });
            
            tokens = ws.many()._andR(str._or(double)._or(int)._or(op)._or(delim)._or(id)._or(comment)).sepBy(ws.many())._andL(ws.many())._andL(eoi());
        }
        
        public tokenize(text: string): Result[SourceChar, list[Token]] {
            tokens.parse(SourceInput(text.Replace("\r\n", "\n").Replace("\r", "\n"))); // 改行コードを統一する // TODO CRLFとCRがあったらWarningを出したい
        }
    }
}