using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

using Atla.Lang;
using Atla.Lang.Hir;
using Atla.Lang.Mir;

// K正規化
namespace Atla.Lang.Hir
{
    [Record]
    public class KNormalExpr {
        public proc: IEnumerable[Mir.Ins];
        public res: option[Mir.Value]; // voidのときnone
    }
    
    variant Callable {
        | MethodInfo { methodInfo: System.Reflection.MethodInfo }
        | Inline { proc: Proc }
    }
    
    public class Trans
    {
        getCallable(mc: Mir.MethodContainer, scope: Hir.Scope, hir: Hir.Expr): Result[Callable] {
            match (hir) { 
                | Hir.Expr.Id(s) => {
                    def ty = hir.type.pruned();
                    def msym = scope.resolveVar(s, ty);
                    match (msym) {
                        | Some(sym) => match (sym.kind) {
                            | SymbolKind.Method(mi) => Result.Success(Callable.MethodInfo(mi))
                            | SymbolKind.InlineMethod(proc) => Result.Success(Callable.Inline(proc))
                        }
                        | _ => Result.Failure($"$hir is not a function.")
                    }
                }
                | fn is Hir.Expr.Fn => {
                    // ラムダ式に名前を付けて定義
                    // TODO クロージャー
                    def resMet = addMethod(mc, scope, fn);
                    
                    match (resMet) {
                        | Result.Success(met) => {
                            Result.Success(Callable.MethodInfo(met.builder))
                        }
                        | Result.Failure(e) => Result.Failure(e)
                    }
                }
                | Hir.Expr.StaticMember(clsName, name) => {
                    mutable ty = scope.resolveType(clsName);
                    match (ty.pruned()) {
                        | Type.Native(nt) => {
                            def mi = nt.GetMethods().Find(methodInfo => {
                                if (methodInfo.Name == name) {
                                    match (hir.type.pruned()) {
                                        | it is Type.Fn => it.canUnify(Type.Fn.from(methodInfo))
                                        | _ => true
                                    }
                                } else {
                                    false
                                }
                            });
                            if (mi.IsSome) {
                                Result.Success(Callable.MethodInfo(mi.Value))
                            } else {
                                Result.Failure("$hir does not exist.")
                            }
                        }
                        // TODO
                    }
                }
            }
        }
        
        public trans(mc: Mir.MethodContainer, frame: Mir.Frame, scope: Hir.Scope, hir: Hir.Stmt): Result[IEnumerable[Mir.Ins]] {
            match (hir) {
                | Hir.Stmt.Expr(e) => trans(mc, frame, scope, e).map(a => a.proc)
                | Hir.Stmt.Return(e) => {
                    mutable retScope = scope;
                    while (true) {
                        match (retScope) {
                            | it is Hir.Scope.Block => trans(mc, frame, scope, e).map(a => {
                                 // ブロックスコープならReturnじゃなくてJumpする
                                match (a.res) {
                                    | None => a.proc.Concat([Mir.Ins.Jump(it.endLabel)])
                                    | Some(v) => a.proc.Concat([Mir.Ins.Assign(it.retSymbol, v), Mir.Ins.Jump(it.endLabel)])
                                }
                            })
                            | it is Hir.Scope.Fn => trans(mc, frame, scope, e).map(a => {
                                match (a.res) {
                                    | Some(v) => a.proc.Concat([Mir.Ins.RetValue(v)])
                                    | _ => a.proc.Concat([Mir.Ins.Ret()])
                                }
                            })
                            | _ => {}
                        }
                    }
                    Result.Failure($"Could not find the return destination. $hir")
                }
                // TODO
            }
        }
        
        public trans(mc: Mir.MethodContainer, frame: Mir.Frame, scope: Hir.Scope, hir: Hir.Expr): Result[KNormalExpr] {
            match (hir) {
                // TODO
                | Hir.Expr.Unit => Result.Success(KNormalExpr([], None())) // TODO Unit Singleton
                | Hir.Expr.Bool(value) => Result.Success(KNormalExpr([], Some(Mir.Value.Imm(Mir.Imm.Bool(value)))))
                | Hir.Expr.Int(value) => Result.Success(KNormalExpr([], Some(Mir.Value.Imm(Mir.Imm.Int(value)))))
                | Hir.Expr.String(s) => Result.Success(KNormalExpr([], Some(Mir.Value.Imm(Mir.Imm.String(s)))))
                | Hir.Expr.Id(name) => {
                    def type = hir.type.pruned(); // TODO 毎回pruneしたくないのでキャッシュする
                    match (scope.resolveVar(name, type)) {
                        | Some(sym) => match (sym.kind) {
                            | SymbolKind.Arg =>  match (NCollectionsExtensions.Find(frame.args, arg => arg.name == sym.name)) { // 同じ名前の引数はないので名前が一致すればいい
                                | Some(arg) => Result.Success(KNormalExpr([], Some(Mir.Value.Sym(arg))))
                                | None => Result.Failure($"Could not find $name in arguments.")
                            }
                            | SymbolKind.Local => match (NCollectionsExtensions.Find(frame.locs, loc => loc.name == sym.name && loc.type.canUnify(sym.type))) { // TODO 同値比較でいい?(symをそのままつかえばいい?)
                                | Some(loc) => Result.Success(KNormalExpr([], Some(Mir.Value.Sym(loc))))
                                | None => Result.Failure($"Could not find $name in locals.")
                            }
                        }
                        | _ => Result.Failure($"$name is not defined as $type type.")
                    }
                }
                | Hir.Expr.Apply(fn, args) => {
                    // 引数の評価順に注意
                    // K正規化
                    def kArgRs = args.Map(arg => trans(mc, frame, scope, arg));
                    foreach (kArgR in kArgRs) {
                        match (kArgR) {
                            | Result.Failure(e) => return Result.Failure(e)
                            | _ => ()
                        }
                    }
                    def kArgs = kArgRs.Map(a => a.getResult().Value);
                    
                    
                    match (getCallable(mc, scope, fn)) {
                        | Result.Success(Callable.MethodInfo(m)) => {
                            def porcArgs = kArgs.SelectMany(_.proc);
                            def resArgs = kArgs.Map(_.res).Filter(_.IsSome).Map(_.Value);
                            
                            if (m.ReturnType == typeof(void)) {
                                Result.Success(KNormalExpr(porcArgs.Concat([Mir.Ins.Call(m, resArgs)]), None()))
                            } else {
                                def tmp = frame.declareTemp(m.ReturnType);
                            
                                Result.Success(KNormalExpr(porcArgs.Concat([Mir.Ins.CallAssign(tmp, m, resArgs)]), Some(Mir.Value.Sym(tmp))))
                            }
                        }
                        | Result.Success(Callable.Inline(proc)) => {
                            def porcArgs = kArgs.SelectMany(_.proc);
                            def resArgs = kArgs.Map(_.res).Filter(_.IsSome).Map(_.Value);
                            
                            match (fn.type.pruned()) {
                                | Atla.Lang.Type.Fn(_, ret) => {
                                    def tmp = frame.declareTemp(ret);
                                    // 引数の数を確認して呼び出し命令生成
                                    def body = match (proc) {
                                        | Proc.DstArg2(body) => body(tmp, resArgs.Nth(0), resArgs.Nth(1))
                                    };
                                    Result.Success(KNormalExpr(porcArgs.Concat(body), Some(Mir.Value.Sym(tmp))))
                                }
                                | _ => Result.Failure($"$fn must be a function.")
                            }
                        }
                        | Result.Failure(e) => Result.Failure(e)
                    }
                }
                | Hir.Expr.Block(blockScope, ss) => {
                    // TODO Block.stmtsをlist[Stmt]にする
                    
                    // TODO 返り値がvoidの時
                    
                    // ブロックの帰り値を確保
                    blockScope.retSymbol = Symbol($"_block_`$(frame.locs.Count())", blockScope.retType, SymbolKind.Local());
                    
                    def stmts = ss.ToNList();
                    def body = if (stmts.Length > 0) {
                        match (stmts.Last()) {
                            | Hir.Stmt.Expr(e) => {
                                // 最後が式文のとき
                                if (stmts.Length > 1) {
                                    // 最後の式以外を変換
                                    mutable res = trans(mc, frame, blockScope, stmts.Head);
                                    foreach (s in stmts.Tail.Take(stmts.Length - 2)) {
                                        res = res.bind(xs => trans(mc, frame, blockScope, s).map(ys => xs.Concat(ys)));
                                    }
                                    // 最後の式の評価結果をblockの帰り値に代入
                                    def rc = trans(mc, frame, blockScope, e);
                                    res.bind(xs => rc.map(c => {
                                        match (c.res) {
                                            | None => xs.Concat(c.proc)
                                            | Some(v) => xs.Concat(c.proc).Concat([Mir.Ins.Assign(blockScope.retSymbol, v)])
                                        }
                                    }))
                                } else {
                                    // 式の評価結果をblockの帰り値に代入
                                    trans(mc, frame, blockScope, e).map(xs => {
                                        match (xs.res) {
                                            | None => xs.proc
                                            | Some(v) => xs.proc.Concat([Mir.Ins.Assign(blockScope.retSymbol, v)])
                                        }
                                    })
                                }
                            }
                            | _ => {
                                stmts.Tail.Fold(trans(mc, frame, blockScope, stmts.Head), (v, acc) => acc.bind(xs => trans(mc, frame, blockScope, v).map(ys => xs.Concat(ys))))
                            }
                        }
                    } else {
                        Result.Success([]) // TODO unitを返す
                    }
                    
                    if (blockScope.retSymbol.type == typeof(void)) {
                        body.bind(b => Result.Success(KNormalExpr(b, None())))
                    } else {
                        body.bind(b => Result.Success(KNormalExpr(b, Some(Mir.Value.Sym(blockScope.retSymbol)))))
                    }
                }
                | Hir.Expr.Fn => throw Exception("")
                | Hir.Expr.Switch(ents) => {
                    mutable racc = Result.Success(List());
                    def endLabel = Mir.Ins.Label(); // switch式を抜けるラベル
                    def tmp = frame.declareTemp(hir.type.pruned().ToSystemType()); // switch式の結果
                    
                    def bodies = ents.Map(ent => (Mir.Ins.Label(), trans(mc, frame, scope, ent.body)));
                    
                    // 分岐命令
                    foreach (i in Enumerable.Range(0, ents.Count())) {
                        def ent = ents.Nth(i);
                        def (label, _) = bodies.Nth(i);
                        def mne = trans(mc, frame, scope, ent.pred);
                        racc = racc.bind(acc => mne.bind(ne => match (ne.res) {
                            // 条件式がTrueならbodyにジャンプ
                            | Some(v) => Result.Success(acc.Concat(ne.proc).Concat([
                                Mir.Ins.JumpTrue(v, label)
                            ]))
                            | _ => Result.Failure($"Switch Predicate $ent.pred is not a Value.")
                        }));
                    }
                    
                    // 分岐先
                    foreach (i in Enumerable.Range(0, ents.Count())) {
                        def ent = ents.Nth(i);
                        def (label, rbody) = bodies.Nth(i);
                        racc = racc.bind(acc => rbody.bind(body => match (body.res) {
                            | Some(v) => {
                                // 分岐ラベルに続けてボディを追加
                                Result.Success(acc.Concat([label]).Concat(body.proc).Concat([
                                    Mir.Ins.Assign(tmp, v),
                                    Mir.Ins.Jump(endLabel), // 分岐の終わりまでジャンプ
                                ]))
                            }
                            | _ => Result.Failure($"Switch Entry $ent should return a Value.")
                        }));
                    }
                    
                    racc.map(r => KNormalExpr(r, Some(Mir.Value.Sym(tmp))))
                }
            }
        }
         
        public trans(import: Hir.Import): void {
            // TODO
            //| Hir.Decl.Import(name) => {
            //    def type = System.Type.GetType(name);
            //    typeTable.Add(name, Hir.Type.Native(type));
            //    // TODO: ドット区切り対応 System.Console を Console として追加登録する
            //    []
            //}
        }
        
        public addMethod(mc: Mir.MethodContainer, scope: Hir.Scope, hir: Hir.Expr.Fn): Result[Mir.Method] {
            def name = $"_func_`$(scope.varTable.Count())";
            scope.declareLocal(name, hir.type);
            addMethod(mc, scope, name, hir);
        }
        
        public addMethod(mc: Mir.MethodContainer, scope: Hir.Scope, name: string, hir: Hir.Expr.Fn): Result[Mir.Method] {
            def type = hir.type.pruned();
            match (type) {
                | Type.Fn => ()
                | _ => return Result.Failure($"$hir is $type, it should be a function.")
            }
            def fnType = type :> Type.Fn;
            
            def method = mc.defineMethod(name, fnType.args.Map(_.ToSystemType()), fnType.ret.ToSystemType());
            foreach (i in Enumerable.Range(0, fnType.args.Length)) {
                match (hir.scope.resolveArgNth(i)) {
                    | Some(sym) when sym.name == hir.args.Nth(i).name => method.frame.declareArg(sym) // 一応名前チェックする
                    | _ => return Result.Failure($"Failed to create method frame. Could not find the argument $(hir.args.Nth(i).name) in function scope.")
                }
            }
            
            // Bodyを変換する前にSymbolにMethodInfoを設定する（再帰関数に対応できる）
            match (scope.resolveVar(name, fnType)) {
                | Some(Symbol as sym) => sym.kind = SymbolKind.Method(method.builder)
                | _ => return Result.Failure($"Could not resolve method $name as $fnType.")
            }
            
            match (trans(mc, method.frame, hir.scope, hir.body)) {
                | Result.Success(proc) => method.body = proc.proc.ToList().ToNList(); // 実行だけでいいはず proc.resは使わない
                | Result.Failure(e) => return Result.Failure(e);
            }
            
            Result.Success(method)
        }
        
        public generateModule(asm: Mir.Assembly, hir: Hir.Module): Result[Mir.Module] {
            def mod = Mir.Module(asm, hir.name);
            
            // TODO type definitions
            
            foreach ((name, overloads) in hir.members.KeyValuePairs) {
                foreach (overload in overloads) {
                    match (addMethod(mod, hir.scope, name, overload)) {
                        | Result.Failure(e) => return Result.Failure(e);
                        | _ => {}
                    }
                }
            }
          
            Result.Success(mod)
        }
        
        public trans(asm: Hir.Assembly): Result[Mir.Assembly] {
            def mir = Mir.Assembly(asm.name, asm.fileName);
            foreach ((name,mod) in asm.modules.KeyValuePairs) {
                match (generateModule(mir, mod)) {
                    | Result.Success(m) => mir.modules[name] = m
                    | Result.Failure(e) => return Result.Failure(e)
                }
                
            }
            Result.Success(mir)
        }
    }
}
