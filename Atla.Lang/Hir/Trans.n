using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using Atla.Lang;
using Atla.Lang.Hir;
using Atla.Lang.Mir;

namespace Atla.Lang.Hir
{
    public class Trans
    {
        public trans(scope: Hir.Scope, hir: Hir.Expr): list[Mir.Ins] {
            match (hir) {
                | Hir.Expr.Apply(fn, args) => {
                    // TODO: K正規化
                    mutable mirArgs: list[Mir.Arg] = [];
                    foreach (arg in args) {
                        match (arg) {
                            | Hir.Expr.String(s) => mirArgs += [Mir.Arg.Imm(Mir.Imm.String(s))]
                            | Hir.Expr.Id(name) => mirArgs += [Mir.Arg.Id(Mir.Id(name, arg.type.pruned()))]
                        }
                    }
                    match (fn) {
                        | Hir.Expr.Id(name) => [Mir.Ins.Call(Mir.Id(name, fn.type.pruned()), mirArgs)]
                        // TODO 関数式
                    }
                }
            }
        }
        
        public trans(import: Hir.Import): void {
            // TODO
            //| Hir.Decl.Import(name) => {
            //    def type = System.Type.GetType(name);
            //    typeTable.Add(name, Hir.Type.Native(type));
            //    // TODO: ドット区切り対応 System.Console を Console として追加登録する
            //    []
            //}
        }
        
        public trans(scope: Hir.Scope, name: string, hir: Hir.Expr): list[Mir.Decl] {
            mutable rhs = trans(scope, hir);
            
            match (hir.type.pruned()) {
                | it is Type.Fn => [Mir.Decl.Fn(Mir.Id(name, it), rhs)]
            }
        }
        
        public trans(hir: Hir.Module): Mir.Module {
            mutable decls: list[Mir.Decl] = [];
            foreach ((name, overloads) in hir.members.KeyValuePairs) {
                foreach (overload in overloads) {
                    decls += trans(hir.scope, name, overload)
                }
            }
          
            Mir.Module(hir.name, decls)
        }
    }
}
