using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Math;

using Atla.Lang;

namespace Atla.Lang.Hir
{
    // 同じHIRに対して複数回呼ばれてもいいように実装する(スコープをいじらない)
    public class Typing
    {
        public typing(hir: Hir.Assembly): void {
            foreach (mod in hir.modules.Values) {
                typing(mod);
            }
        }
        
        public typing(hir: Hir.Module): void {
            // next, analyze the type hints.
            foreach (ty in hir.types) {
                typing(hir.scope, ty);
            }
            foreach (method in hir.methods) {
                typing(hir.scope, method.fn, Type.Unknown());
            }
        }
        
        public typing(scope: Scope, hir: Atla.Lang.Type.Define): void {
            foreach (field in hir.fields) {
                _ = field.type.unify(field.typeHint.resolve(hir.scope))
            }
            foreach (method in hir.methods) {
                typing(hir.scope, method.fn, Type.Unknown());
            }
        }
        
        // トップダウンで型を構築してボトムアップで型推論
        public typing(scope: Scope, hir: Hir.Expr, expected: Type): void {
            _ = hir.type.unify(hir.typeHint.resolve(scope));
            _ = hir.type.unify(expected);
            
            match (hir) {
                | Unit => _ = hir.type.unify(Type.Unit)
                | Bool => _ = hir.type.unify(Type.Bool)
                | Int => _ = hir.type.unify(Type.Int)
                | Double => _ = hir.type.unify(Type.Double)
                | String => _ = hir.type.unify(Type.String)
                | Block(blockScope, stmts) => {
                    foreach (stmt in stmts) {
                        typing(blockScope, stmt);
                    }
                    
                    when (stmts.Count() > 0) {
                        match (stmts.Last()) {
                            | Hir.Stmt.Expr(e) => _ = blockScope.retType.unify(e.type)  // ブロックの最後の式は返り値とする
                            | Hir.Stmt.Return => ()
                            | _ => _ = blockScope.retType.unify(Type.Unit) // ただの文ならunit型とする
                        }
                    }
                    
                    
                    // スコープの返り値で推論
                    _ = hir.type.unify(blockScope.retType);
                }
                | Fn(args, body, bodyScope) => {
                    def fnType: Type.Fn = match (hir.type.unVar()) {
                        | it is Type.Fn => it
                        | _ => Type.Fn(args.Map(_ => Type.Var()), Type.Var())
                    }
                    
                    // インスタンスメソッド(最初の引数がthisなら)
                    when (args.Length > 0 && args.First().name == "this") {
                        def typeName = searchTypeScopeName(scope);
                        when (typeName.IsSome) {
                            fnType.args = scope.resolveType(typeName.Value) :: fnType.args.Tail;
                        }
                    }
                    
                    // 引数の型推論
                    foreach (i in Enumerable.Range(0, fnType.args.Count())) {
                        _ = bodyScope.resolveArgNth(i).Value.type.unify(fnType.args.Nth(i));
                    }
                    _ = bodyScope.retType.unify(fnType.ret);
                    typing(bodyScope, body, fnType.ret);
                    
                    _ = hir.type.unify(fnType);
                }
                | Id(name, _) as id => {
                    _ = id.type.unify(expected);
                    match (id.getSymbol(scope)) {
                        | Some(var) => {
                            _ = hir.type.unify(var.type);
                        }
                        | _ => hir.errors.Add(Error.UndefinedReference(name, expected.pruned()))
                    }
                }
                | Member(expr, name) => {
                    typing(scope, expr, Type.Unknown());
                    
                    // 最初の引数に自身を適用する
                    def partialApply(thisType: Type, fnType: Type): Type {
                        match (fnType.pruned()) {
                            | Type.Fn(args, ret) when args.Length > 0 => if (args.First().canUnify(thisType)) {
                                if (args.Length == 1) ret else Type.Fn(args.Tail, ret)
                            } else {
                                null // 最初の引数の型が違う
                            }
                            | _ => null // そもそも関数じゃない
                        }
                    }
                    
                    def findMembers(type: Type, genericParams: list[Type]): IEnumerable[Type] {
                        match (type.pruned()) {
                            | Type.Define as it => {
                                def fieldTypes = it.fields.Filter(fi => fi.name == name).Map(_.type);
                                def methodTypes = it.methods.Filter(mt => mt.name == name).Map(m => partialApply(it, m.fn.type)).Filter(t => t != null); // 合わなかった型を除く
                                fieldTypes.Concat(methodTypes)
                            }
                            | Type.Native as nt => {
                                def fieldTypes = nt.type.GetFields().Where(fi => fi.Name == name).Map(fi => {
                                    // TODO 型パラメーターの解決(多分現状動いていない)
                                    mutable t = fi.GetType();
                                    if (t.IsGenericParameter) {
                                        genericParams.Nth(t.GenericParameterPosition)
                                    } else {
                                        Type.fromSystemType(t)
                                    }
                                });
                                def methodTypes = nt.type.GetMethods().Where(mi => mi.Name == name && !mi.IsStatic).Map(mi => {
                                    // TODO 型パラメーターの解決(多分現状動いていない)
                                    def ps = mi.GetParameters().Map(p => {
                                        def t = p.GetType();
                                        if (t.IsGenericParameter) {
                                            genericParams.Nth(t.GenericParameterPosition)
                                        } else {
                                            Type.fromSystemType(t)
                                        }
                                    });
                                    // ここの型パラメーター解決は正しそう
                                    mutable ret = mi.ReturnType;
                                    when (ret.IsGenericType && ret.ContainsGenericParameters) {
                                        ret = ret.GetGenericTypeDefinition().MakeGenericType(genericParams.Map(_.ToSystemType()).ToArray());
                                    }
                                    when (ret.IsGenericParameter && ret.ContainsGenericParameters) {
                                        ret = genericParams.Map(_.ToSystemType()).Nth(ret.GenericParameterPosition);
                                    }
                                    
                                    // 引数がないならUnitを追加
                                    if (ps.IsEmpty())
                                        Type.Fn([Type.Unit], Type.fromSystemType(ret))
                                    else
                                        Type.Fn(ps.NToList(), Type.fromSystemType(ret))
                                });
                                fieldTypes.Concat(methodTypes)
                            }
                            | Type.Generic as ge => {
                                // TODO ジェネリクスが入れ子のときの型パラメーター
                                findMembers(ge._base, ge._params)
                            }
                            | _ => []
                        }
                    }
                    
                    def members = findMembers(expr.type, []);
                    def ty = if (members.Count() == 0)
                        Type.Error(TypeError.InferenceFailure($"Could not find field $name in $(expr.type.pruned())."))
                    else
                        Type.OneOf(members.NToList());
                    
                    _ = hir.type.unify(ty);
                }
                | StaticMember(tyName, name) => {
                    def resolveMembers(members: IEnumerable[string * Type]) {
                        def ts = members.Filter((n, _) => n == name).Map((_, t) => t);
                        if (ts.Count() == 1) {
                            _ = hir.type.unify(ts.First())
                        } else if (ts.IsEmpty()) {
                            hir.type.errors.Add(TypeError.InferenceFailure($"Could not resolve $tyName::$name as $(hir.type.pruned())"))
                        } else {
                            _ = hir.type.unify(Type.OneOf(ts.NToList()))
                        }
                    }
                    
                    mutable ty = scope.resolveType(tyName);
                    match (ty.pruned()) {
                        | Type.Define as cls => {
                            def ms = cls.methods.Map(m => (m.name , m.fn.type));
                            def fs = cls.fields.Map(fi => (fi.name, fi.type));
                            resolveMembers(ms.Concat(fs));
                        }
                        | Type.Native as nt => {
                            def ms = nt.type.GetMethods().Map(methodInfo => (methodInfo.Name, methodInfo.toFnType(scope)));
                            def fs = nt.type.GetFields().Filter(fi => fi.IsStatic).Map(fieldInfo => (fieldInfo.Name, Type.fromSystemType(fieldInfo.GetType())));
                            resolveMembers(ms.Concat(fs));
                        }
                        | _ => {
                            // モジュールの可能性
                            match (scope.resolveModule(tyName)) {
                                | Some(Either.Left(Hir.Module as m)) => {
                                    def ms = m.methods.Map(method => (method.name, method.fn.type));
                                    resolveMembers(ms); // TODO フィールド?
                                }
                                | Some(Either.Right(System.Reflection.Module as m)) => {
                                    def ms = m.GetMethods().Map(methodInfo => (methodInfo.Name, methodInfo.toFnType(scope)));
                                    def fs = m.GetFields().Filter(fi => fi.IsStatic).Map(fieldInfo => (fieldInfo.Name, Type.fromSystemType(fieldInfo.GetType())));
                                    resolveMembers(ms.Concat(fs));
                                }
                                | _ => hir.type.errors.Add(TypeError.Undefined(tyName))
                            }
                        }
                    }
                }
                | Apply(fn, args) => {
                    // 関数の型を特定したいので、先に引数の型を解析
                    foreach (arg in args) {
                        typing(scope, arg, Type.Unknown());
                    }
                    // 関数を解決
                    typing(scope, fn, Type.Fn(args.Map(_.type), Type.Var(expected)));
                    
                    // 関数の型から引数と返り値を推論
                    match (fn.type.unVar()) {
                        | Type.Fn(xs, y) when xs.Length == args.Length => {
                            foreach ((arg, x) in args.Zip(xs)) {
                                _ = arg.type.unify(x)
                            }
                            
                            _ = hir.type.unify(y)
                        }
                        | Type.OneOf => ()
                        | Type.Error => () // エラーならそれ以上推論しない
                        | t => fn.type.errors.Add(TypeError.InferenceFailure($"Could not infer $t as a function."))
                    }
                }
                | Switch(entries) => {
                    foreach (entry in entries) {
                        // 条件式をBoolとして型推論
                        typing(scope, entry.pred, Type.Bool);
                        // bodyスコープでこの式の型として型推論
                        typing(entry.bodyScope, entry.body, hir.type);
                    }
                }
            }
        }
        
        // 型の関係式をトップダウンで構築
        public typing(scope: Hir.Scope, hir: Hir.Stmt): void {
            match (hir) {
                | Hir.Stmt.Var(id, rhs, _) => {
                    typing(scope, rhs, Type.Unknown()); // TODO type hint
                    match (id.getSymbol(scope)) { // Analyzeでスコープに宣言されているはず
                        | Some(dest) => {
                            _ = dest.type.unify(rhs.type)
                        }
                        | _ => hir.errors.Add(Hir.Error.UndefinedReference(id.name, rhs.type.pruned()))
                    }
                }
                | Hir.Stmt.Assign(id, rhs) => {
                    typing(scope, rhs, Type.Unknown());
                    // 右辺から左辺の型を推論
                    _ = id.type.unify(rhs.type);
                    match (id.getSymbol(scope)) {
                        | Some(dest) => {
                            _ = dest.type.unify(rhs.type)
                        }
                        | _ => hir.errors.Add(Hir.Error.UndefinedReference(id.name, rhs.type.pruned()))
                    }
                }
                | Hir.Stmt.Expr(expr) => typing(scope, expr, Type.Unknown())
                | Hir.Stmt.Return(value) => {
                    typing(scope, value, Type.Unknown());
                    _ = scope.getRetType().Map(t => t.unify(value.type)) // 返り値でスコープの型を推論
                }
                | Hir.Stmt.For(id, iter, body, bodyScope) => {
                    def itemType = Type.Var();
                    typing(scope, iter, Type.Generic(Type.Iterator, [itemType])); // Iteratorを期待する
                    typing(scope, id, itemType); // Iteratorの要素の型と一致させる
                    foreach (stmt in body) {
                        typing(bodyScope, stmt)
                    }
                }
            }
        }
        
        searchTypeScopeName(scope: Hir.Scope): option[string] {
            match (scope) {
                | Hir.Scope.Type as t => Some(t.name)
                | _ => match (scope.getParent()) {
                    | Some(p) => searchTypeScopeName(p)
                    | _ => None()
                }
            }
        }
    }
    
    public module HirTypingExtensions {
        public static toFnType(this methodInfo: System.Reflection.MethodInfo, scope: Scope): Atla.Lang.Type.Fn {
            def pTypes = methodInfo.GetParameters().Map(p => p.ParameterType);
            def argTypes = if (pTypes.IsEmpty())
                [Type.Unit] // 引数がないときは代わりにUnitを引数とする
            else
                pTypes.Map(t => Type.fromSystemType(t)).ToNList();
            Atla.Lang.Type.Fn(argTypes, Type.fromSystemType(methodInfo.ReturnType));
        }
        
    }
}
