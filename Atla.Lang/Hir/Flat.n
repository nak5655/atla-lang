using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Atla.Lang.Hir
{
    // 関数の入れ子を外に出す(Expr.Fn -> Method)
    public class Flat
    {
        mutable _seqClsId: int = -1;
        getUniqueClassName(): string {
            _seqClsId += 1;
            $"Closure`$_seqClsId"
        }
        
        mutable _seqTmpId: int = -1;
        getUniqueTempName(): string {
            _seqTmpId += 1;
            $"closure_tmp`$_seqTmpId"
        }
        
        replaceFn(modScope: Scope.Module, scope: Hir.Scope, hir: Hir.HasExpr): IEnumerable[Type.Define] {
            mutable ret: List[Type.Define] = List();
            hir.replaceExpr(scope, (s: Scope, e) => match (e) {
                | Hir.Expr.Fn as f => {
                    // bodyはすでに置換済みなので注意（Bottom-Upなので）
                    
                    // クロージャーを表すクラスを作成
                    def fClass = Type.Define(getUniqueClassName());
                    
                    ret.Add(fClass);
                    
                    // クロージャーをインスタンスメソッドとして作成
                    def closure = Hir.Expr.Fn("this" :: f.args.Map(_.name));
                    match (f.type.unVar()) {
                        | Type.Fn(args, ret) => _ = closure.type.unify(Type.Fn(fClass :: args, ret));
                        | _ => ()
                    }
                    closure.body = f.body;
                    
                    // クロージャー内の自由変数を置換しながら列挙
                    // TODO Assignの置換
                    def freeVars: List[string * Symbol] = List(); // 新たなフィールド名 * 元のシンボル
                    closure.body.replaceExpr(f.scope, (s, e) => match (e) {
                        | Hir.Expr.Id as it => match (it.getSymbol(s)) {
                            | Some(sym) => {
                                // スコープの深さから自由変数を判定する (モジュールより浅いのはアクセスできるので除く)
                                if (modScope.depth < sym.depth && sym.depth < f.scope.depth) {
                                    // クロージャークラスのフィールドアクセスに置換
                                    // 同じ変数が複数回登録されないように注意
                                    def fieldName = match (NCollectionsExtensions.Find(freeVars, (n, s) => s == sym)) {
                                        | Some((n, _)) => n // すでに置換済み
                                        | _ => {
                                            def n = $"freeVar`$(freeVars.Count())";
                                            freeVars.Add(n, sym);
                                            n
                                        }
                                    };
                                    Hir.Expr.Member(Hir.Expr.Id("this"), fieldName)
                                } else {
                                    e
                                }
                            }
                            | _ => e
                        }
                        | _ => e
                    });
                    
                    // 自由変数をフィールドとして定義
                    foreach ((name, sym) in freeVars) {
                        def field = TypeField(name, TypeHint.None());
                        _ = field.type.unify(sym.type);
                        fClass.fields.Add(field);
                    }
                    
                    // 自由変数を除いた関数本体をクラス内に定義
                    def met = Hir.Method("closure`invoke", closure);
                    fClass.methods.Add(met);
                    
                    
                    // 型宣言と型推論
                    modScope.declareType(fClass.name, fClass);
                    fClass.scope = Scope.Type(modScope, fClass.name);
                    Analyze().analyze(fClass); // スコープ構築
                    Typing().typing(modScope, fClass); // 型推論
                    
                    //
                    // クロージャーのクラスが完成したら、クロージャーを関数呼び出し式に置き換える
                    //
                    
                    // 元の関数式をクロージャーに置き換え
                    def block = Hir.Expr.Block();
                    block.scope = Scope.Block(s);
                    
                    // クラスのインスタンスの名前
                    def fClassInstName = getUniqueTempName();
                    def fClassInstId(): Expr.Id {
                        def id = Hir.Expr.Id(fClassInstName);
                        id.type.unify(fClass);
                        id
                    }
                    
                    block.stmts.AddRange([
                        // コンストラクタ呼び出し
                        Hir.Stmt.Var(fClassInstId(), Hir.Expr.Apply(Hir.Expr.Id(fClass.name), freeVars.Map((_, sym) => Hir.Expr.Id(sym))), false),
                        // 関数を返す
                        Hir.Stmt.Expr(Hir.Expr.Member(fClassInstId(), met.name)),
                    ]);
                    Analyze().analyze(s, block); // スコープ構築
                    Typing().typing(s, block, e.type); // 型推論
                    block
                }
                | _ => e
            });
            
            ret
        }
        
        public flat(modScope: Scope.Module, hir: Hir.Method): IEnumerable[Type.Define] {
            replaceFn(modScope, hir.fn.scope, hir.fn.body)
        }
        
        public flat(hir: Hir.Module): void {
            mutable newTypes: IEnumerable[Type.Define] = [];
            foreach (method in hir.methods) {
                newTypes = newTypes.Concat(flat(hir.scope, method));
            }
            hir.types.AddRange(newTypes);
        }
        
        public flat(hir: Hir.Assembly): void {
            foreach (mod in hir.modules.Values) {
                flat(mod);
            }
        }
    }
}
