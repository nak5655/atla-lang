using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Linq;
using Atla.Lang.Parse;


/**
脱糖済み
型推論の対象
第一級関数の展開
**/
namespace Atla.Lang.Hir
{
    public variant Error {
        | DuplicatedDeclaration { name: string; type: Type; already: Type }
        | TypeUnificationFailure {
            refered: Type; referer: Type;
            
            public override ToString(): string {
                $"Could not unify type $refered and $referer."
            }
        }
        | TypeRecursiveReference { a: Type; b: Type }
        | UndefinedReference {
            name: string; type: Type;
            
            public override ToString(): string {
                $"Undefined variable. $name: $type"
            }
        }
        | UndefinedType {
            name: string;
            
            public override ToString(): string {
                $"$name type is not defined."
            }
        }
        | AmbiguousType { types: list[Type] }
        | TypeInferenceUnmatched { types: list[Type] }
    }
    
    public variant Stmt: HasSpan[Expr] {
        | Expr { expr: Hir.Expr }
        | Let { name: string; expr: Hir.Expr }
        | Assign { name: string; expr: Hir.Expr }
        | Return { value: Hir.Expr }
        
        public scanErrors(): IEnumerable[(Error * Span)] {
            match (this) {
                | Expr(e) => e.scanErrors()
                | Let(_, e) => e.scanErrors()
                | Assign(_, e) => e.scanErrors()
                | Return(e) => e.scanErrors()
            }
        }
    }
    
    public class FnArg: HasSpan[FnArg] {
        public name: string;
        
        public this(name: string) {
            this.name = name;
        }
        
        public override ToString(): string {
            $"$name"
        }
    }
    
    public variant Expr: HasSpan[Expr] {
        | Unit {
            public override ToString(): string {
                "Unit"
            }
        }
        | Int {
            public value: int;
            
            public override ToString(): string {
                $"Int($value)"
            }
        }
        | String {
            public value: string;
            
            public override ToString(): string {
                $"String($value)"
            }
        }
        | Block {
            public scope: Scope;
            public mutable stmts: List[Stmt] = List();
            
            public this(parentScope: Scope) {
                this.scope = Scope(parentScope);
            } 
            
            public override ToString(): string {
                def stmtsStr = Misc.joinToString(", ", stmts);
                $"Block($stmtsStr)"
            }
        }
        | Fn {
            public args: list[FnArg];
            public mutable body: Expr;
            public scope: Scope;
            
            public this(parentScope: Scope, args: list[string]) {
                this.args = args.Map(a => FnArg(a));
                // TODO ブロックスコープで引数を宣言
                this.scope = Scope(parentScope);
            }
            
            public override ToString(): string {
                def argsStr = Misc.joinToString(", ", args);
                $"Fn($argsStr) { $body }"
            }
        }
        | Id {
            public name: string;
            
            public override ToString(): string {
                $"Id($name)"
            }
        }
        | Member {
            public expr: Expr;
            public name: string;
            
            public override ToString(): string {
                $"Member($expr, $name)"
            }
        }
        | Apply {
            public fn: Expr;
            public args: list[Expr];
            
            public override ToString(): string {
                def argsStr = Misc.joinToString(", ", args);
                $"Apply($fn, $argsStr)"
            }
        }
        
        public mutable typeHint: Hir.TypeHint = Hir.TypeHint.None();
        public mutable type: Hir.Type.Var = Type.Var();
        
        // TODO Type.Varのエラーが重複する
        public scanErrors(): IEnumerable[(Error * Span)] {
            def es = match (this) {
                | Unit => []
                | Int => []
                | String => []
                | Block(_, ss) => ss.SelectMany(_.scanErrors())
                | Fn(args, body, _) => body.scanErrors()
                | Id => []
                | Member(e, _) => e.scanErrors()
                | Apply(fn, args) => fn.scanErrors().Concat(args.SelectMany(_.scanErrors()))
            }
            es.Concat(type.scanErrors().Select(e => (e, span)))
        }
    }
    
    [Record]
    public class Import {
        public path: list[string];
        
        public dotted(): string {
            def sb = System.Text.StringBuilder();
            when (path.Length > 0)
                _ = sb.Append(path.First());
            when (path.Length > 1) {
                foreach (s in path.Tail) {
                    _ = sb.Append("." + s);
                }
            }            
            sb.ToString()
        }
        
        // TODO: errors
    }
    
    public class Module {
        public name: string;
        public imports: List[Import];
        public mutable members: Hashtable[string, List[Expr]]; // overloads
        
        public scope: Scope;
        
        public this(name: string) {
            this.name = name;
            imports = List();
            members = Hashtable();
            
            scope = Scope();
        }
        
        public import(path: list[string]): void {
            imports.Add(Import(path))
            // TODO edit scope
        }
        
        public declareFn(name: string, fn: Expr.Fn): void {
            when (!members.ContainsKey(name))
                members.Add(name, List());
            
            def overloads = members[name];
            overloads.Add(fn)
        }
        
        public scanErrors(): IEnumerable[(Error * Span)] {
            members.Values.SelectMany(_.SelectMany(_.scanErrors()))
        }
    }
}
