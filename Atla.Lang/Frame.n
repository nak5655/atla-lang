using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Atla.Lang
{
    public variant FramePosition {
        | Arg { index: int }
        | Loc { index: int }
    }
    
    public class Frame
    {
        public args: List[Symbol] = List();
        public locs: List[Symbol] = List();
        
        public declareArg(symbol: Symbol): void {
            args.Add(symbol);
        }
        
        public declareLocal(symbol: Symbol): void {
            locs.Add(symbol);
        }
        
        public declareTemp(type: System.Type): Symbol {
            declareTemp(Atla.Lang.Type.Native(type))
        }
        
        public declareTemp(type: Atla.Lang.Type): Symbol {
            def sym = Symbol($"tmp`$(locs.Count())", type, SymbolKind.Local(), 0);
            locs.Add(sym);
            sym
        }
        
        public resolve(symbol: Symbol): option[FramePosition] {
            for (mutable i = 0; i < locs.Count(); i++) {
                when (locs[i].Equals(symbol))
                    return Some(FramePosition.Loc(i))
            }
            for (mutable i = 0; i < args.Count(); i++) {
                when (args[i].Equals(symbol))
                    return Some(FramePosition.Arg(i))
            }
            
            None()
        } 
    }
}
