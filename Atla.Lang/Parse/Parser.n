using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Linq;

using Atla.Lang.Parse;

namespace Atla.Lang.Parse
{
    // instead of annonymous class
    public class AnnoParser[I, A]: Parser[I, A] {
        mutable _apply: Input[I] -> ParseResult[I, A];
        
        public this(apply: Input[I] -> ParseResult[I, A]) {
            _apply = apply
        }
        
        public override apply(input: Input[I]): ParseResult[I, A] {
            _apply(input)
        }
    }
    
    public abstract class Parser[I, A]
    {
        mutable cache: Hashtable[System.Object, ParseResult[I, A]];
        
        public this() {
            cache = Hashtable();
        }
        
        public abstract apply(input: Input[I]): ParseResult[I, A];
        
        public parse(input: Input[I]): ParseResult[I, A] {
            cache.GetValueOrDefault(input.position(), apply(input))
        }

        public map[B](f: A -> B): Parser[I, B] {
            AnnoParser((input) => {
                parse(input).map(success => ParseSuccess(f(success.result), success.next))
            })
        }
        
        public _and[B](other: Parser[I, B]): Parser[I, A * B] {
            AnnoParser(input => {
                parse(input).bind(lhs: ParseSuccess[I, A] => {
                    other.parse(lhs.next).map(rhs => ParseSuccess((lhs.result, rhs.result), rhs.next))
                })
            })
        }
        
        public _andL[B](other: Parser[I, B]): Parser[I, A] {
            (this._and(other)).map(res => res[0])
        }
        
        public _andR[B](other: Parser[I, B]): Parser[I, B] {
            (this._and(other)).map(res => res[1])
        }
        
        public _or(other: Parser[I, A]): Parser[I, A] {
            AnnoParser(input => {
                match (parse(input)) {
                    | ParseResult.Success as lhs => lhs
                    | ParseResult.Failure => other.parse(input)
                }
            })
        }
        
        // EOIにマッチしないので注意（パフォーマンスのため）
        public many(): Parser[I, list[A]] {
            AnnoParser(input => {
                mutable current = input;
                def ret: List[A] = List();
                while (true) {
                    when (current.get().IsNone) // 入力がなくなったらすぐに終了する (パフォーマンスのため)
                        break;
                    match (parse(current)) {
                        | ParseResult.Success(ParseSuccess(result, next)) => {
                            ret.Add(result);
                            current = next;
                        }
                        | ParseResult.Failure => break
                    }
                }
                ParseResult.Success(ParseSuccess(ret.ToNList(), current))
            })
        }
        
        public many1(): Parser[I, list[A]] {
            _and(many()).map((x, xs) => x :: xs)
        }
        
        public sepBy[B](sep: Parser[I, B]): Parser[I, list[A]] {
            AnnoParser(input => {
                mutable current = input;
                def ret: List[A] = List();
                while (true) {
                    when (current.get().IsNone) // 入力がなくなったらすぐに終了する (パフォーマンスのため)
                        break;
                    match (_andL(sep).parse(current)) {
                        | ParseResult.Success(ParseSuccess(result, next)) => {
                            ret.Add(result);
                            current = next;
                            continue;
                        }
                        | _ => ()
                    }
                    match (parse(current)) {
                        | ParseResult.Success(ParseSuccess(result, next)) => {
                            ret.Add(result);
                            current = next;
                        }
                        | ParseResult.Failure => break
                    }
                    break
                }
                ParseResult.Success(ParseSuccess(ret.ToNList(), current))
            })
        }
        
        public sepBy1[B](sep: Parser[I, B]): Parser[I, list[A]] {
            AnnoParser(input => {
                sepBy(sep).parse(input).bind(success => if (success.result.Length > 0) {
                    ParseResult.Success(ParseSuccess(success.result, success.next))
                } else {
                    ParseResult.Failure(ParseFailure($"unexpected $(input.get())", input))
                });
            })
        }
        
        public optional(): Parser[I, option[A]] {
            AnnoParser(input => {
                match (parse(input)) {
                    | ParseResult.Success(ParseSuccess(result, next)) => ParseResult.Success(ParseSuccess(Some(result), next))
                    | ParseResult.Failure(ParseFailure(_, failAt)) => ParseResult.Success(ParseSuccess(None(), failAt))
                }
            })
        }
        
        public notFollowedBy[B](other: Parser[I, B]): Parser[I, A] {
            AnnoParser(input => {
                parse(input).bind(success => match (other.parse(success.next)) {
                    | ParseResult.Success(next) => ParseResult.Failure(ParseFailure($"unexpected $(next.result)", success.next))
                    | ParseResult.Failure => ParseResult.Success(success)
                })
            })
        }
        
        public skipFail(f: ParseResult[I, A] -> A): Parser[I, A] {
            AnnoParser(input => {
                match (parse(input)) {
                    | ParseResult.Success as res => res
                    | ParseResult.Failure as res => {
                        mutable current = input;
                        while (current.get().IsSome) {
                            current = current.next();
                        }
                        
                        ParseResult.Success(ParseSuccess(f(res), current))
                    }
                }
            })
        }
    }
}
