using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Linq;
using Atla.Lang.Parse;

namespace Atla.Lang.Parse
{
    [Record]
    public class Span {
        public lo: Position;
        public hi: Position;
        
        public length(): int {
            hi.index - lo.index
        }
        
        public static @+(a: Span, b: Span): Span {
            when (a.length() < 1) {
                return b;
            }
            when (b.length() < 1) {
                return a;
            }
            
            def lo = if (a.lo.CompareTo(b.lo) < 0) a.lo else b.lo;
            def hi = if (a.hi.CompareTo(b.hi) > 0) a.hi else b.hi;
            Span(lo, hi)
        }
        
        public override ToString(): string {
            $"Span($lo, $hi)"
        }
        
        public static zero(): Span {
            Span(Position([], 0, 0, 0), Position([], 0, 0, 0))
        }
    }
    
    public class HasSpan[T] where T: HasSpan[T] {
        public mutable span: Span = Span.zero();
        
        public addSpan(other: Span): T {
            if (span == null || span.length() == 0)
                span = other
            else if (other == null || other.length() == 0)
                ()
            else
                span = span + other;
            
            this :> T
        }
        
        public addSpan(others: list[Span]): T {
            foreach (other in others) {
                _ = addSpan(other)
            }
            this :> T
        }
    }
}