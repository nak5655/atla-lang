using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

using Atla;
using Atla.Lang;
using Atla.Lang.Parse;

namespace Atla.Lang.Ast
{
    public variant Pattern: HasSpan[Pattern] {
        | Any
        | Int { value: int }
    }
    
    [Record]
    public variant IfEntry: HasSpan[IfEntry] {
        | Then { pred: Expr; body: Expr; }
        | Else { body: Expr; }
        | Error { reason: string }
        
        public scanErrors(): IEnumerable[(string * Span)] {
            match (this) {
                | Error(s) => [(s, this.span)]
                | Then(p, b) => p.scanErrors().Concat(b.scanErrors())
                | Else(b) => b.scanErrors()
            }
        }
    }
    
    [Record]
    public variant MatchEntry: HasSpan[MatchEntry] {
        | Case { pattern: Pattern; body: Expr; }
        | Error { reason: string }
        
        public scanErrors(): IEnumerable[(string * Span)] {
            match (this) {
                | Error(s) => [(s, this.span)]
                | Case(p, b) => b.scanErrors() // TODO pattern.scanErrors()
            }
        }
    }
    
    [Record]
    public class FnArg: HasSpan[FnArg] {
        public name: string;
        public typeHint: TypeHint;
    }
    
    public variant Expr: HasSpan[Expr] {
        | Unit
        | Int { value: int }
        | String { value: string }
        | Id { value: string }
        | Block { stmts: list[Stmt] }
        | Fn { args: list[FnArg]; body: Expr }
        | Member { obj: Expr; member: string }
        | StaticMember { objName: string; member: string }
        | Apply { fn: Expr; args: list[Expr] }
        | If { entries: list[IfEntry] }
        | Match { expr: Expr; entries: list[MatchEntry] }
        | Error { reason: string }
        
        public typeHint: option[TypeHint] = None();
        
        public scanErrors(): IEnumerable[(string * Span)] {
            match (this) {
                | Error(s) => [(s, this.span)]
                | Block(ss) => ss.SelectMany(_.scanErrors())
                | Fn(_, b) => b.scanErrors()
                | Member(obj, _) => obj.scanErrors()
                | Apply(fn, args) => fn.scanErrors().Concat(args.SelectMany(_.scanErrors()))
                | If(es) => es.SelectMany(_.scanErrors())
                | Match (e, es) => e.scanErrors().Concat(es.SelectMany(_.scanErrors()))
                | _ => []
            }
        }
    }
    
    public variant Stmt: HasSpan[Stmt] {
        | Let { name: string; rhs: Ast.Expr }
        | Assign { name: string; rhs: Ast.Expr }
        | Expr { expr: Ast.Expr }
        | Ret { expr: Ast.Expr }
        | Error { reason: string }
        
        public scanErrors(): IEnumerable[(string * Span)] {
            match (this) {
                | Error(s) => [(s, this.span)]
                | Let(_, e) => e.scanErrors()
                | Assign(_, e) => e.scanErrors()
                | Expr(e) => e.scanErrors()
                | Ret(e) => e.scanErrors()
            }
        }
    }
    
    public variant ClassItem: HasSpan[ClassItem] {
        | Field { name: string; typeHint: TypeHint; mut: bool; init: option[Expr] }
        | Method { name: string; args: list[FnArg]; body: Expr }
        | Error { reason: string }
    }
    
    public variant Decl: HasSpan[Decl] {
        | Class { name: string; items: list[ClassItem] }
        | Fn { name: string; args: list[FnArg]; ret: TypeHint; body: Ast.Expr }
        | Import { path: list[string] }
        | Error { reason: string }
        
        public scanErrors(): IEnumerable[(string * Span)] {
            match (this) {
                | Error(s) => [(s, this.span)]
                | Fn(_, _, _, e) => e.scanErrors()
                | Class(_, cis) => [] // TODO
                | _ => []
            }
        }
    }
    
    [Record]
    public class Module: HasSpan[Module] {
        public decls: list[Decl];
        
        public scanErrors(): IEnumerable[(string * Span)] {
            decls.SelectMany(_.scanErrors())
        }
    }
}
