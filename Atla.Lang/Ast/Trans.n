using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Linq;

using Atla;
using Atla.Lang;

namespace Atla.Lang.Ast
{
    // 脱糖
    // タイプヒントは明示された分だけ
    // スコープは作るけど操作は無し
    public class Trans
    {
        public trans(typeHint: option[TypeHint]): TypeHint {
            if (typeHint.IsNone) TypeHint.None() else typeHint.Value
                
        }
        
        public trans(scope: Hir.Scope, ast: Ast.Stmt): Hir.Stmt {
            def stmt: Hir.Stmt = match (ast) {
                | Ast.Stmt.Expr(expr) => Hir.Stmt.Expr(trans(scope, expr))
                | Ast.Stmt.Let(name, expr) => {
                    def rhs = trans(scope, expr);
                    Hir.Stmt.Let(name, rhs)
                }
                | Ast.Stmt.Assign(name, expr) => {
                    def rhs = trans(scope, expr);
                    Hir.Stmt.Assign(name, rhs)
                }
                | Ast.Stmt.Ret(expr) => Hir.Stmt.Return(trans(scope, expr))
            };
            stmt.addSpan(ast.span)
        }
        
        public trans(scope: Hir.Scope, ast: Ast.Expr): Hir.Expr {
            def expr: Hir.Expr = match (ast) {
                | Ast.Expr.Unit => Hir.Expr.Unit()
                | Ast.Expr.Int(value) => Hir.Expr.Int(value)
                | Ast.Expr.String(value) => Hir.Expr.String(value)
                | Ast.Expr.Block(stmts) => {
                    def block = Hir.Expr.Block(scope);
                    block.stmts = stmts.Map(s => trans(block.scope, s)).ToList();
                    block
                }
                | Ast.Expr.Fn(args, body) => {
                    def fn = Hir.Expr.Fn(scope, args.Map(_.name));
                    fn.typeHint = TypeHint.Fn(args.Map(arg => arg.typeHint), trans(body.typeHint));
                    fn.body = trans(fn.scope, body);
                    fn
                }
                | Ast.Expr.Id(value) => Hir.Expr.Id(value)
                | Ast.Expr.Member(expr, member) => Hir.Expr.Member(trans(scope, expr), member)
                | Ast.Expr.StaticMember(objName, member) => Hir.Expr.StaticMember(objName, member)
                | Ast.Expr.Apply(fn, args) => Hir.Expr.Apply(trans(scope, fn), args.Map(e => trans(scope, e)))
            }
            expr.typeHint = trans(ast.typeHint);
            expr.addSpan(ast.span)
        }
        
        public declare(mod: Hir.Module, ast: Ast.Decl): void {
            match (ast) {
                | Ast.Decl.Import(path) => mod.import(path)
                | Ast.Decl.Fn(name, args, ret, body) => {
                    def fnType = TypeHint.Fn(args.Map(_.typeHint), ret);
                    _ = fnType.addSpan(args.Map(_.span) + [ret.span]);
                    
                    def fn = Hir.Expr.Fn(mod.scope, args.Map(_.name));
                    _ = fn.addSpan(ast.span);
                    fn.typeHint = fnType;
                    
                    mod.declareFn(name, fn);
                    fn.body = trans(fn.scope, body); // 関数宣言でスコープを作ってから本体を定義
                }
                | Ast.Decl.Error => {}
            }
        }
        
        public trans(globalScope: Hir.Scope.Global, ast: Ast.Module, name: string): Hir.Module {
            def mod = Hir.Module(globalScope, name);
            foreach (decl in ast.decls) {
                declare(mod, decl);
            }
            mod
        }
    }
}
