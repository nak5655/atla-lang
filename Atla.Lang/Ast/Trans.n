using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Linq;

using Atla;
using Atla.Lang;

// この時点でHir.Scopeを触らないように設計する
// TODO Hir.from に変更(ASTがHIRの詳細に依存すべきではない)
namespace Atla.Lang.Ast
{
    // 脱糖
    // タイプヒントは明示された分だけ
    // スコープは作るけど操作は無し
    public class Trans
    {
        public trans(typeHint: option[TypeHint]): TypeHint {
            if (typeHint.IsNone) TypeHint.None() else typeHint.Value
                
        }
        
        public trans(ast: Ast.Pattern): Hir.Pattern {
            match (ast) {
                | Ast.Pattern.Any => Hir.Pattern.Any()
                | Ast.Pattern.Int(value) => Hir.Pattern.Int(value)
            }
        }
        
        public trans(ast: Ast.MatchEntry): Result[Hir.MatchEntry, Problem] {
            match (ast) {
                | Ast.MatchEntry.Case(p, e) => trans(e).map(ee => Hir.MatchEntry(trans(p), ee))
                | Ast.MatchEntry.Error as e => Result.Failure(Problem(Severity.Error, e.ToString(), ast.span))
            }
        }
        
        public trans(ast: Ast.IfEntry): Result[Hir.SwitchEntry, Problem] {
            match (ast) {
                | Ast.IfEntry.Then(p, e) => trans(p).bind(pp => trans(e).map(ee => Hir.SwitchEntry(pp, ee)))
                | Ast.IfEntry.Else(e) => trans(e).map(ee => Hir.SwitchEntry(Hir.Expr.Bool(true), ee))
                | Ast.IfEntry.Error as e => Result.Failure(Problem(Severity.Error, e.ToString(), ast.span))
            }
        }
        
        public trans(ast: Ast.Stmt): Result[Hir.Stmt, Problem] {
            def stmt: Result[Hir.Stmt, Problem] = match (ast) {
                | Ast.Stmt.Expr(expr) => trans(expr).map(e => Hir.Stmt.Expr(e))
                | Ast.Stmt.Val(name, expr) => {
                    trans(expr).map(rhs => Hir.Stmt.Var(Hir.Expr.Id(name), rhs, false))
                }
                | Ast.Stmt.Var(name, expr) => {
                    trans(expr).map(rhs => Hir.Stmt.Var(Hir.Expr.Id(name), rhs, true))
                }
                | Ast.Stmt.Assign(name, expr) => {
                    trans(expr).map(rhs => Hir.Stmt.Assign(Hir.Expr.Id(name), rhs))
                }
                | Ast.Stmt.Ret(expr) => trans(expr).map(e => Hir.Stmt.Return(e))
                | Ast.Stmt.Fn(f) => {
                    trans(f).map(method => Hir.Stmt.Var(Hir.Expr.Id(method.name), method.fn, false)) // syntax suger
                }
                | Ast.Stmt.Error as e => Result.Failure(Problem(Severity.Error, e.ToString(), ast.span))
            };
            stmt.map(s => s.addSpan(ast.span))
        }
        
        public trans(ast: Ast.Expr): Result[Hir.Expr, Problem] {
            def expr: Result[Hir.Expr, Problem] = match (ast) {
                | Ast.Expr.Unit => Result.Success(Hir.Expr.Unit())
                | Ast.Expr.Int(value) => Result.Success(Hir.Expr.Int(value))
                | Ast.Expr.Double(value) => Result.Success(Hir.Expr.Double(value))
                | Ast.Expr.String(value) => Result.Success(Hir.Expr.String(value))
                | Ast.Expr.Block(stmts) => {
                    def block = Hir.Expr.Block();
                    stmts.Map(s => trans(s)).seq().map(ss => {
                        block.stmts = ss.ToList();
                        block
                    })
                }
                | Ast.Expr.Fn(args, body) => {
                    def fn = Hir.Expr.Fn(args.Map(_.name));
                    fn.typeHint = TypeHint.Fn(args.Map(arg => arg.typeHint), trans(body.typeHint));
                    trans(body).map(b => {
                        fn.body = b;
                        fn
                    })
                }
                | Ast.Expr.Id(value) => Result.Success(Hir.Expr.Id(value))
                | Ast.Expr.Member(expr, member) => trans(expr).map(e => Hir.Expr.Member(e, member))
                | Ast.Expr.StaticMember(objName, member) => Result.Success(Hir.Expr.StaticMember(objName, member))
                | Ast.Expr.Apply(fn, args) => trans(fn).bind(f => args.Map(e => trans(e)).seq().map(es => Hir.Expr.Apply(f, es.NToList())))
                | Ast.Expr.If(entries) => entries.Map(en => trans(en)).seq().map(es => Hir.Expr.Switch(es.NToList()))
                | Ast.Expr.Match(e, entries) => trans(e).bind(ee => entries.Map(en => trans(en)).seq().map(es => Hir.Expr.Match(ee, es.NToList())))
                | Ast.Expr.Error as e => Result.Failure(Problem(Severity.Error, e.ToString(), ast.span))
            }
            
            expr.map(e => {
                e.typeHint = trans(ast.typeHint);
                e.addSpan(ast.span)
            })
        }
        
        public trans(ast: Ast.Fn): Result[Hir.Method, Problem] {
            def t = match (ast) {
                | Ast.Fn.Static(name, args, ret, body) => Result.Success(name, args, ret, body)
                | Ast.Fn.Instance(name, args, ret, body) => {
                    // this引数を追加する
                    Result.Success(name, Ast.FnArg("this", TypeHint.None()) :: args, ret, body)
                }
                | Ast.Fn.Error as e => Result.Failure(e.ToString())
            };
            
            match (t) {
                | Result.Success((name, args, ret, body)) => {
                    def fnType = TypeHint.Fn(args.Map(_.typeHint), ret);
                    _ = fnType.addSpan(args.Map(_.span) + [ret.span]);
                    
                    def fn = Hir.Expr.Fn(args.Map(_.name));
                    _ = fn.addSpan(ast.span);
                    fn.typeHint = fnType;
                    
                    trans(body).map(b => {
                        fn.body = b;
                        Hir.Method(name, fn)
                    })
                }
                | Result.Failure(e) => Result.Failure(Problem(Severity.Error, e.ToString(), ast.span))
            }
        }
        
        public trans(ast: Ast.Decl.Type): Result[Type.Define, Problem] {
            def ty = Type.Define(ast.name);
            foreach (item in ast.items) {
                _ = match (item) {
                    | Ast.TypeItem.Field as p => ty.fields.Add(TypeField(p.name, trans(Some(p.typeHint))))
                    | Ast.TypeItem.Method as m => {
                        match (trans(m.fn)) {
                            | Result.Success(mm) => ty.methods.Add(mm)
                            | Result.Failure(e) => return Result.Failure(e)
                        }
                    }
                    | Ast.TypeItem.Error as e => return Result.Failure(Problem(Severity.Error, e.ToString(), ast.span))
                }
            }
            
            Result.Success(ty)
        }
        
        public trans(ast: Ast.Module, name: string): Result[Hir.Module, Problem] {
            def mod = Hir.Module(name);
            foreach (decl in ast.decls) {
                match (decl) {
                    | Ast.Decl.Import(path) => mod.import(path)
                    | Ast.Decl.StaticFn(f) => {
                        def r = trans(f);
                        when (r.isFailure())
                            return Result.Failure(r.getError().Value);
                        mod.methods.Add(r.getResult().Value);
                    }
                    | Ast.Decl.Type as t => {
                        def r = trans(t);
                        when (r.isFailure())
                            return Result.Failure(r.getError().Value);
                        mod.types.Add(r.getResult().Value);
                    }
                    | Ast.Decl.Error as e => return Result.Failure(Problem(Severity.Error, e.ToString(), ast.span))
                }
            }
            Result.Success(mod)
        }
    }
}
