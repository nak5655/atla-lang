using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Reflection.Emit;

using Atla.Lang;

namespace Atla.Lang.Cir
{
    public class Label {
        mutable label: option[System.Reflection.Emit.Label];
        
        public this() {
            label = None();
        }
        
        public get(gen: ILGenerator): System.Reflection.Emit.Label {
            when (label.IsNone) {
                label = Some(gen.DefineLabel());
            }
            
            label.Value
        }
    }
    
    public variant Ins {
        | LdLoc { index: int }
        | StLoc { index: int }
        | LdArg { index: int }
        | StArg { index: int }
        | LdStr { str: string }
        | LdInt32 { value: int }
        | Call { method: MethodInfo }
        | Ret
        | Nop
        | MarkLabel { label: Label }
        | BrS { label: Label } // jump
    }
    
    [Record]
    public class Method {
        public builder: MethodBuilder; // subtype of MethodInfo
        public body: list[Ins];
    }
    
    [Record]
    public class Type {
        public builder: TypeBuilder;
        public methods: list[Method];
    }
    
    [Record]
    public class Module
    {
        public builder: ModuleBuilder;
        public mutable types: list[Type];
        public mutable methods: list[Method];
    }
    
    [Record]
    public class Assembly
    {
        public fileName: string;
        public builder: AssemblyBuilder;
        public mutable modules: list[Module];
    }
}
